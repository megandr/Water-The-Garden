/**
 *  Outlet and switch sprinkler valve controller, reads PlantLink humidity and turns on a switch or opens a valve to water your garden. Includes Dark Sky API
 *  to check if rain is coming and will override the watering cycle if desired. Executes on sensor events, which PlantLink reports every 15 minutes. If a watering
 *  cycle is running for a period longer than the reporting period, new events are ignored until the first cycle is complete. 
 *
 *  Copyright Â© 2016 jrb
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 * 
 *  Use at your own risk, this is a beta release, I am not responsible for flooding your garden, killing your plants from lack or water, or any other "act of God". Please see
 *  https://en.wikipedia.org/wiki/Act_of_God
 *
 *	Version: 0.1 - Initial Check-in
 *	Version: 0.2 - Bug fixes, removed sendEvent, fixed SMS messages, updated messages
 *  	Version: 0.3 - Fixed logic error where garden could be watered below desired threshold
 *  	Version: 0.4 - Created override to water the garden based on rain intensity from Dark Sky API - if rain predicted = very light but over rain threshold then water anyway
*/
definition(
    name: "Water The Garden",
    namespace: "jrb",
    author: "jrbmobile",
    description: "Monitors any sensors that report humidity. The app turns on a switch or outlet to open a sprinkler valve. Checks the Dark Sky API if desired to see if rain is coming soon in case you wish to override.",
    category: "Green Living",
    iconX3Url: "http://cdn.device-icons.smartthings.com/Outdoor/outdoor5-icn@3x.png",
    iconX2Url: "http://cdn.device-icons.smartthings.com/Outdoor/outdoor5-icn@2x.png",
    iconUrl: "http://cdn.device-icons.smartthings.com/Outdoor/outdoor5-icn.png")
preferences {
    page name:"pageInfo"
}

def pageInfo() {
	return dynamicPage(name: "pageInfo", install: true, uninstall: true) {
		section("About") {
		paragraph "Monitors any sensors that report humidity. The app turns on a switch or outlet to open a sprinkler valve or an actual valve. Checks the Dark Sky API if desired to see if rain is coming soon in case you wish to override."
		}
        section("Select Moisture Sensors...") {
			input "sensors", "capability.relativeHumidityMeasurement", title: "Moisture Sensor", multiple: true, required: true
		}
		section("Event Notifications..."){
			input "sendPush", "bool", title: "Send as Push?", required: false
			input "phoneNumber", "phoneNumber", title: "Send as SMS?", required: false
        }
        section("Watering Parameters...") {
        	input "waterWhen", "number", title: "Water when % soil moisture goes below: ", required: true, range: "0..100"
            input(name: "rainIntensity", type: "enum", title: "Allow watering during: ", options: ["never override","very light rain","light rain","moderate rain","heavy rain"])
            input "useDarkSkyAPI" , "bool", title: "Use Dark Sky API to check for rain?", required: false, submitOnChange: true
            def useDarkSkyAPI = settings.useDarkSkyAPI
            if (useDarkSkyAPI) {
            		input "darkSkyAPIKey", "text", title: "Enter your Dark Sky API Key: ", required: false, defaultValue: ""
            		input "darkSkyPercent", "text", title: "Enter your % limit for rain prediction: ", required: false, range: "0..100", defaultValue: 50
            		input "darkSkyTime", "number", title: "How many hours ahead for rain prediction: ", required: false, range: "1..12", defaultValue: 1
               }
            input "selectSwitch", title: "Which outlet(s) controls the water valve? ", "capability.switch", multiple: true, required: false
            input "selectValve", title: "Which water valve(s)? ", "capability.valve", multiple: true, required: false
            input "waterDuration", "number", title: "Watering duration in minutes?", required: false, range: "1..60", defaultValue: 10
        }
        
// To be implemented - maybe, doesn't make sense for drip irrigation
//        section("Between The Hours...") {
//            input "betweenHours" , "bool", title: "Between The Hours?", required: false, submitOnChange: true
//            if (betweenHours) {
//                    input "starting", "time", title: "Start time", required: false
//                    input "ending", "time", title: "End time", required: false
//            }
//        }
	}
}
def installed() {
	log.debug "Installed with settings: ${settings}"
    log.debug "rain enum: ${rainIntensity}"
	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"
    log.debug "rain enum: ${rainIntensity}"
	unsubscribe()
	initialize()
}

def initialize() {
	log.info "Water the garden installed/updated - ${textVersion()} ${textCopyright()}"
    subscribe(sensors, "humidity", humidityHandler)
}

def humidityHandler(evt) {
	log.debug "Humidity Evt - Device: ${evt.device}, Name: ${evt.name}, Event Value ${evt.value}"
    if (evt.name == "humidity") {
    	if (betweenHours) {
            def between = timeOfDayIsBetween(timeToday(starting, location.timeZone), timeToday(ending, location.timeZone), new Date(), location.timeZone)
            log.debug ("between: ${between}")
            if (between) {
                if (between) {
                    if (useDarkSkyAPI) {
                        darkSkyCheck(evt)
                    }
                    else {
                        if (settings.selectSwitch) {
                            sendWaterSwitch(evt)
                        }
                        if (settings.selectValve) {
                            sendWaterValve(evt)
                        }
                    }
                }
            }
        }
        else {
           if (useDarkSkyAPI) {
                darkSkyCheck(evt)
           }
           else {
              if (settings.selectSwitch) {
                  sendWaterSwitch(evt)
              }
              if (settings.selectValve) {
                   sendWaterValve(evt)
              }
           }
        }

    }
}

def resistivityHandler(evt) {
	log.debug "Other Evt - Device: ${evt.device}, Name: ${evt.name}, Event Value ${evt.value}"
    if(evt.name == "resistivity") {
        log.debug "Resistivity percent is ${evt.value}"
        def percent = 0.00
        if(evt.value == 0) { 
            return percent
        }
        else  {
            percent = (3.1916 * evt.value ** -0.412)
        }
        if(percent < 0) { 
            percent = 0
        }
        percent = percent * 100
        log.debug "resistivity to percent: ${percent}"
        send("Resistivity ${evt.value} To Percent: ${percent}")
    }
}
def sendWaterSwitch(evt) {
	log.debug "Checking whether to water or not"
        try {
            log.debug "PlantLink: ${evt.device}, Soil moisture: ${evt.value}%, water when: ${waterWhen}%"
            if (evt.value.toInteger() <= waterWhen.toInteger()) {
                if (settings.useDarkSkyAPI) {
                    darkSkyCheck(evt)
                    } else {
    				send("Watering Garden, Turning On ${selectSwitch}")
                    turnOnSwitch()
                }			
            } else {
            log.debug "Not watering"
            }
        }
        catch (e) {
            log.trace "Error checking status"
            log.trace e
        }
}

def sendWaterValve(evt) {
	log.debug "Checking whether to water or not"
        try {
            log.debug "PlantLink: ${evt.device}, Soil moisture: ${evt.value}%, water when: ${waterWhen}%"
            if (evt.value.toInteger() <= waterWhen.toInteger()) {
                if (settings.useDarkSkyAPI) {
                    darkSkyCheck(evt)
                    } else {
    				send("Watering Garden, Turning On ${selectValve}")
                    turnOnValve()
                }			
            } else {
            log.debug "Not watering"
            }
        }
        catch (e) {
            log.trace "Error checking status"
            log.trace e
        }
}

def darkSkyCheck(evt) { 
    def precipProb = 0
    def greatestProb = 0
    def intensity = 0.0
    def iDescript = ""
    def aOverride = 0
    //dark skys api # only
    //log.debug (humidity - ${evt.value})
    if (evt.value.toInteger() <= waterWhen.toInteger()) {
        httpGet("https://api.forecast.io/forecast/" + darkSkyAPIKey + "/$location.latitude,$location.longitude") {response -> 
        if (response.data) {
            0.upto(settings.darkSkyTime.toInteger()-1, {
                precipProb = response.data.hourly.data[it].precipProbability * 100
                if (greatestProb < precipProb) {
                    greatestProb = precipProb
                    intensity = response.data.hourly.data[it].precipIntensity
                }
                log.debug "precipitation probability in ${it+1} hour(s): ${precipProb}%, intensity: ${intensity}"
        })
        def iOverride = -99
        switch(rainIntensity) {
            case "never override":
                iOveride = -1
            case "very light rain":
                iOverride = 1
            case "light rain":
                iOverride = 2
            case "moderate rain":
                iOverride = 3
            case "heavy rain":
                iOverride = 4
//            default: 
//                iOverride = -1
        }

		if ( intensity == 0.0 ) {
                iDescript = "rain"
                aOverride = 0
        	}
        if ( intensity > 0.0 && intensity < 0.002 ) {
                iDescript = "very light rain"
                aOverride = 1
        	}
        if ( intensity >= 0.002 && intensity < 0.017 ) {
                iDescript = "light rain"
                aOverride = 2
        	}
        if ( intensity >= 0.017 && intensity < 0.1 ) {
                iDescript = "moderate rain"
                aOverride - 3
        	}
        if ( intensity >= 0.1 && intensity < 10.0 ) {
                iDescript = "heavy rain"
                aOverride = 4
        	}
        log.debug "Dark Sky predicts precipitation probability: ${greatestProb}%, limit ${darkSkyPercent.toBigDecimal()}"
        log.debug "override values: ${iOverride}, ${aOverride}"
        if (greatestProb < darkSkyPercent.toBigDecimal() || iOverride >= aOverride) {
                send("Dark Sky predicts ${greatestProb}% chance of ${iDescript} in the next ${settings.darkSkyTime} hour(s).")
                if (settings.selectSwitch) {
                    send("Watering Garden, Turning On ${selectSwitch}")
                    turnOnSwitch()
                }
                if (settings.selectValve) {
                    send("Watering Garden, Turning On ${selectValve}")
                    turnOnValve()
                }
            }
            else {
            send("Dark Sky predicts ${greatestProb}% chance of ${iDescript} in the next ${settings.darkSkyTime} hour(s). Not Watering")
            }
         } else {
             log.debug "HttpGet Response data unsuccesful."
            }
         }
     }
}
def turnOnSwitch() {
    log.debug "Turning switch on for ${settings.waterDuration} minute(s)."
	def switchAttr = selectSwitch.currentValue("switch") 
    //log.debug "turnOn: Switch state: ${switchAttr}"
    selectSwitch.on()
    unsubscribe()  // unsubscribe from future PlantLink events to not trigger another cycle if wait time is longer than event reporting time
    runIn(60 * settings.waterDuration, turnOffSwitch)
}

def turnOffSwitch() {
    log.debug "Turning off switch"
   	selectSwitch.off()
    send("Water Cycle Complete, Turning Off ${selectSwitch}")
    unschedule()
    subscribe(sensors, "humidity", humidityHandler) // resubscribe to PlantLink humidity event
}

def turnOnValve() {
    log.debug "Turning valves on for ${settings.waterDuration} minute(s)."
	def valveAttr = selectValve.currentValue("contact") 
    //log.debug "turnOn: Valve state: ${valveAttr}"
    selectValve.on()
    unsubscribe()  // unsubscribe from future PlantLink events to not trigger another cycle if wait time is longer than event reporting time
    runIn(60 * settings.waterDuration, turnOffValve)
}

def turnOffValve() {
    log.debug "Turning off valve"
   	selectValve.off()
    send("Water Cycle Complete, Turning Off ${selectValve}")
    unschedule()
    subscribe(sensors, "humidity", humidityHandler) // resubscribe to PlantLink humidity event
}

def send(msg) {
    if (sendPush) {
        sendPush(msg)
    }
    if (phoneNumber) {
        sendSms(phoneNumber, msg) 
    }
}

private def textVersion() {
    def text = "Version 0.1"
}

private def textCopyright() {
    def text = "Copyright Â© 2016 jrb"
}
